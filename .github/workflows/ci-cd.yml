name: CI Pipeline

on:
  push:
    branches:
      - main  # Adjust this as needed
  pull_request:
    branches:
      - main  # Adjust this as needed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew  # Ensures the gradlew script is executable

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew  # Ensures the gradlew script is executable

      - name: Run tests
        run: ./gradlew test

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/

  scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures complete history for analysis (important for SonarQube analysis)
          submodules: false

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'  # Changed to 'zulu' for better compatibility (you can revert to 'adopt' if preferred)

      - name: Grant execute permissions to gradlew (optional for Windows)
        if: runner.os != 'Windows'  # Only run this on non-Windows runners
        run: chmod +x ./gradlew  # Ensures the gradlew script is executable

      - name: Run SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

#name: Build and Analyze
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build:
#    name: Build and Analyze
#    runs-on: ubuntu-latest
#
#    steps:
#      # Checkout the repository to get the code
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # Ensures all history is fetched for better SonarCloud analysis
#
#      # Set up JDK 17 for the build process
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: 17
#          distribution: 'zulu'  # Using Zulu JDK distribution
#
#      # Cache SonarQube packages to improve build time
#      - name: Cache SonarQube packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#
#      # Cache Gradle packages to speed up builds
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#
#      # Ensure gradlew has execute permissions
#      - name: Grant execute permissions for gradlew
#        run: chmod +x ./gradlew
#
#      # Run Gradle build and analyze using SonarCloud
#      - name: Build and Analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew build sonar --info