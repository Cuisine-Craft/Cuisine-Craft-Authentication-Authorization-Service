#name: CI Pipeline
#
#on:
#  push:
#    branches:
#      - main       # Adjust this as needed
#  pull_request:
#    branches:
#      - main       # Adjust this as needed
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#
#      - name: Grant execute permissions to gradlew
#        run: chmod +x ./gradlew  # Ensures the gradlew script is executable
#
#      - name: Build with Gradle
#        run: ./gradlew assemble
#
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#  test:
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#
#      - name: Grant execute permissions to gradlew
#        run: chmod +x ./gradlew  # Ensures the gradlew script is executable
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: test-reports
#          path: build/reports/
#
#  scan:
#    needs: test
#    runs-on: [ self-hosted, Windows, X64 ]
#
#    steps:
#      # Step 1: Checkout the repository
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # Ensures complete history for analysis (important for SonarQube analysis)
#          submodules: false
#      # Step 2: Set up JDK 17
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'zulu'  # Changed to 'zulu' for better compatibility (you can revert to 'adopt' if preferred)
#
#      # Step 3: Grant execute permissions to gradlew (Unix-specific, might not be needed on Windows, optional)
#      - name: Grant execute permissions to gradlew
#        if: runner.os != 'Windows'  # Only run this on non-Windows runners
#        run: chmod +x ./gradlew  # Ensures the gradlew script is executable
#
#      # Step 4: Run SonarQube scan
#      - name: Run SonarQube Scan
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: |
#          ./gradlew sonar "-Dsonar.projectKey=Cuisine-Craft_Cuisine-Craft-Authentication-Authorization-Service_8f212176-f64e-4011-9f3e-0bf70756d09d" "-Dsonar.host.url=$SONAR_HOST_URL" "-Dsonar.login=$SONAR_TOKEN"

name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures all history is fetched for better SonarQube analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Using Zulu JDK

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          run: ./gradlew build sonar --info
      
